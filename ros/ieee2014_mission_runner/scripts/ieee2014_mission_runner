#!/usr/bin/python

import math
import itertools
import time
import os

import numpy
from twisted.internet import reactor, defer, threads

import rospy
from geometry_msgs.msg import PoseStamped, Pose, Point, Quaternion
from sensor_msgs.msg import Image, CameraInfo
from std_msgs.msg import Header, Float64
from tf import transformations
import image_geometry

from ieee2014_controller.srv import SetEnabled
from ieee2014_maestro.srv import ClipPos, FireDart
from xmega_connector.srv import GetColor
import sys

import ieee2014_mission_runner
from ieee2014_mission_runner import coarse_targeting, fine_targeting, util
from ieee2014_simulator.scene import course_length, course_width, INCH

from ieee2014_vision.srv import Detect_Blocks
from ieee2014_vision.msg import BlockPositions

rospy.init_node('ieee2014_mission_runner')

pose_topic = util.TopicReader('pose', PoseStamped)
gun_camera_image_topic = util.TopicReader('gun_camera/image_rect_color', Image)
gun_camera_info_topic = util.TopicReader('gun_camera/camera_info', CameraInfo)
block_topic = util.TopicReader('block_positions', BlockPositions)

controller_set_enabled = util.wrap_blocking_func(rospy.ServiceProxy(
    'controller/set_enabled', SetEnabled, persistent=True))
raw_change_clip_position = util.wrap_blocking_func(rospy.ServiceProxy(
    'change_clip_position', ClipPos, persistent=True))
fire_dart = util.wrap_blocking_func(rospy.ServiceProxy(
    'fire_dart', FireDart, persistent=True))
target_solver_set_enabled = util.wrap_blocking_func(rospy.ServiceProxy(
    'target_solver/set_enabled', SetEnabled, persistent=True))
detect_blocks = util.wrap_blocking_func(rospy.ServiceProxy(
    'Detect_Blocks', Detect_Blocks, persistent=True))
get_color = util.wrap_blocking_func(rospy.ServiceProxy(
    'xmega_connector/get_color', GetColor, persistent=True))

@defer.inlineCallbacks
def change_clip_position(pos):
    yield raw_change_clip_position(pos)
    yield util.sleep(1)

controller_pub = rospy.Publisher('desired_pose', PoseStamped, queue_size=10)
pan_pub = rospy.Publisher('pan_controller/command', Float64, queue_size=10)
tilt_pub = rospy.Publisher('tilt_controller/command', Float64, queue_size=10)

def unpack_blocks(block_msg):
    print block_msg
    block_positions = []
    for block in block_msg.blocks:
        block_positions.append((block.x,block.y))
        
    return block_positions


@defer.inlineCallbacks
def set_pan_tilt(pan, tilt):
    for i in xrange(10):
        pan_pub.publish(Float64(
            data=pan % (2 * math.pi),
        ))
        tilt_pub.publish(Float64(
            data=tilt % (2 * math.pi),
        ))
        yield util.sleep(.1)
    # it can take longer than 1 second..

@defer.inlineCallbacks
def go_to_point(point, angle=0):
    print 'going to point', point, angle
    
    # sent point to controller
    def send_point():
        controller_pub.publish(PoseStamped(
            header=Header(
                frame_id='/course',
            ),
            pose=Pose(
                position=Point(point[0], point[1], 0),
                orientation=Quaternion(*transformations.quaternion_from_euler(0, 0, angle)),
            ),
        ))
    send_point()
    
    # enable controller
    yield controller_set_enabled(True)
    
    # wait until near point
    last_bad_time = rospy.Time.now()
    while True:
        send_point() # just to make sure...
        msg = yield pose_topic.get_next_message()
        distance = numpy.linalg.norm(util.xy_array(msg.pose.position) - point)
        angle_error = angle - transformations.euler_from_quaternion(util.xyzw_array(msg.pose.orientation))[2]
        while angle_error > +math.pi: angle_error -= 2*math.pi
        while angle_error < -math.pi: angle_error += 2*math.pi
        if distance > 0.05 or abs(angle_error) > 0.1:
            last_bad_time = rospy.Time.now()
        if rospy.Time.now() - last_bad_time > rospy.Duration(0.5):
            break
    
    # disable controller (stops wheels)
    yield controller_set_enabled(False)
    
    print 'done going to point'

@defer.inlineCallbacks
def turn_and_go(point):
    pose = yield pose_topic.get_next_message()
    angle = math.atan2(*(point - util.xy_array(pose.pose.position))[::-1])
    yield go_to_point(util.xy_array(pose.pose.position), angle)
    yield go_to_point(point, angle)
    yield go_to_point(point, 0)

import cv2
from cv_bridge import CvBridge
bridge = CvBridge()
@defer.inlineCallbacks
def do_fine_targeting(approx_pos, current_angles):
    print 'fine targeting start'
    camera_info = yield gun_camera_info_topic.get_next_message()
    P = numpy.resize(camera_info.P, (3, 4))
    #camera_model = image_geometry.PinholeCameraModel(); camera_model.fromCameraInfo(camera_info)
    
    img_msg = yield gun_camera_image_topic.get_next_message()
    img = bridge.imgmsg_to_cv2(img_msg, "bgr8")
    res = yield fine_targeting.get(img, approx_pos, P)
    print res
    
    delta_pan = -math.asin(res[0]/P[0, 0])
    delta_tilt = -math.asin(res[1]/P[1, 1]) # - 0.03
    
    print delta_pan, delta_tilt
    
    yield set_pan_tilt(
        pan=current_angles['pan'] + delta_pan,
        tilt=current_angles['tilt'] + delta_tilt,
    )
    print 'fine targeting end'

@defer.inlineCallbacks
def main():
    yield set_pan_tilt(0.3, 0.0)
    
    detect_blocks(True)
    
    @defer.inlineCallbacks
    def signalStarted():
        yield change_clip_position(1)
        yield util.sleep(1)
        yield change_clip_position(3)
        yield util.sleep(1)
        yield change_clip_position(1)
    
    colors = []
    started = False
    while True:
        msg = yield get_color()
        #print msg.clear
        colors.append(msg.clear)
        yield util.sleep(.1)
        
        if len(colors) > 20:
            if not started:
                signalStarted()
                started = True
            delta = numpy.mean(colors[-10:]) - numpy.mean(colors[-20:-10])
            print delta
            if delta > 5:
                break
    
    run_start = reactor.seconds()
    
    # XXX
    #yield set_pan_tilt(0.0, 0.0)
    #yield util.sleep(1)
    #return
    # end XXX
    
    start_pos = (-1.09, -0.34)
    end_pos = (1.06, -0.40)
    
    # XXX
    #yield go_to_point((0, start_pos[1]))
    #return
    # end XXX
    
    #yield go_to_point(start_pos + numpy.array([0.2, 0]))
    #yield go_to_point(start_pos)
    
    #yield util.sleep(1)
    
    # XXX test
    img_msg = yield gun_camera_image_topic.get_next_message()
    img = bridge.imgmsg_to_cv2(img_msg, "bgr8")
    t = int(time.time())
    cv2.imwrite(os.path.join(os.path.expanduser('~'), 'blocks-%i.png' % (t,)), img)
    
    # look for blocks, fill in block_positions
    
    if True:
        pan = 0.3
        for attempt in itertools.count():
            block_positions = unpack_blocks((yield block_topic.get_next_message()))
            if len(block_positions) == 3:
                break
            print "Not enough blocks detected"
            if attempt % 25 == 24:
                pan += 0.1
                yield set_pan_tilt(pan, 0.0)
        detect_blocks(False)
    else:
        block_positions = [
            (-0.30, +0.19),
            (-0.00, -0.18),
            (+0.32, +0.20),
        ]
    
    print 'block_positions', block_positions
    
    block_positions = sorted(block_positions, key=lambda (x, y): x)
    
    clip = lambda a, (l, r): l if a < l else r if a > r else a
    block_positions = [(x, clip(y-.02, (-course_width+11*INCH, course_width/2-6*INCH))) for x, y in block_positions]
    
    # snap blocks to allowed regions of lines
    block_positions[0] = -course_length/2+35.25*INCH, block_positions[0][1]
    
    center = -course_length/2, 0
    radius = 48*INCH
    angle = math.atan2(block_positions[1][1]-center[1], block_positions[1][0]-center[0])
    block_positions[1] = radius*math.cos(angle)+center[0], radius*math.sin(angle)+center[1]
    
    block_positions[2] = -course_length/2+57.75*INCH, block_positions[2][1]
    
    print 'block_positions 2', block_positions
    
    for i, block_position in enumerate(block_positions):
        coarse_angles = coarse_targeting.think(block_position)
        coarse_target_task = set_pan_tilt(**coarse_angles)
        yield go_to_point(block_position)
        
        # let particle filter reconverge then recenter
        yield util.sleep(2)
        yield go_to_point(block_position)
        
        clip_task = change_clip_position([2, 1, 3][i])
        start = reactor.seconds()
        sleep_task = util.sleep(3)
        
        yield coarse_target_task # should already be done
        yield util.sleep(1) # wait to stop moving
        yield do_fine_targeting(block_position, coarse_angles)
        
        yield sleep_task # wait remainder of 3 seconds
        
        yield clip_task
        print 'waited', reactor.seconds() - start, 'seconds on block', i
        yield fire_dart(True) # internally waits 1 second
        print 'done firing'
    yield go_to_point(end_pos)
    run_end = reactor.seconds()
    yield change_clip_position(4)
    
    print 'run took', run_end - run_start
    
    yield util.sleep(30)
    
    os.system('sudo poweroff')

@defer.inlineCallbacks
def main2():
    pos = (0, 0)
    
    yield util.sleep(1) # wait for things to connect...
    
    #yield set_pan_tilt(0.3, 0.0)
    #yield util.sleep(4)
    
    coarse_angles = coarse_targeting.think(pos)
    yield set_pan_tilt(**coarse_angles)
    
    yield util.sleep(2)
    
    yield do_fine_targeting(pos, coarse_angles)

def run():
    def stopper(x):
        reactor.stop()
        return x
    return main().addBoth(stopper)
reactor.callWhenRunning(run)

reactor.callWhenRunning(lambda: rospy.core.add_client_shutdown_hook(
    lambda reason=None: reactor.callFromThread(reactor.stop)))
reactor.run()
